// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v2.proto

package protocol

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MetaDesc_DataType int32

const (
	MetaDesc_TEXT  MetaDesc_DataType = 0
	MetaDesc_AUDIO MetaDesc_DataType = 1
	MetaDesc_IMAGE MetaDesc_DataType = 2
	MetaDesc_VIDEO MetaDesc_DataType = 3
	MetaDesc_OTHER MetaDesc_DataType = 4
)

var MetaDesc_DataType_name = map[int32]string{
	0: "TEXT",
	1: "AUDIO",
	2: "IMAGE",
	3: "VIDEO",
	4: "OTHER",
}

var MetaDesc_DataType_value = map[string]int32{
	"TEXT":  0,
	"AUDIO": 1,
	"IMAGE": 2,
	"VIDEO": 3,
	"OTHER": 4,
}

func (x MetaDesc_DataType) String() string {
	return proto.EnumName(MetaDesc_DataType_name, int32(x))
}

func (MetaDesc_DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a51956628217588, []int{0, 0}
}

type LoaderInput_SessState int32

const (
	LoaderInput_STREAM LoaderInput_SessState = 0
	LoaderInput_ONCE   LoaderInput_SessState = 1
)

var LoaderInput_SessState_name = map[int32]string{
	0: "STREAM",
	1: "ONCE",
}

var LoaderInput_SessState_value = map[string]int32{
	"STREAM": 0,
	"ONCE":   1,
}

func (x LoaderInput_SessState) String() string {
	return proto.EnumName(LoaderInput_SessState_name, int32(x))
}

func (LoaderInput_SessState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a51956628217588, []int{2, 0}
}

type LoaderOutput_RespStatus int32

const (
	LoaderOutput_BEGIN    LoaderOutput_RespStatus = 0
	LoaderOutput_CONTINUE LoaderOutput_RespStatus = 1
	LoaderOutput_END      LoaderOutput_RespStatus = 2
	LoaderOutput_ONCE     LoaderOutput_RespStatus = 3
)

var LoaderOutput_RespStatus_name = map[int32]string{
	0: "BEGIN",
	1: "CONTINUE",
	2: "END",
	3: "ONCE",
}

var LoaderOutput_RespStatus_value = map[string]int32{
	"BEGIN":    0,
	"CONTINUE": 1,
	"END":      2,
	"ONCE":     3,
}

func (x LoaderOutput_RespStatus) String() string {
	return proto.EnumName(LoaderOutput_RespStatus_name, int32(x))
}

func (LoaderOutput_RespStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a51956628217588, []int{3, 0}
}

type MetaDesc struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataType             MetaDesc_DataType `protobuf:"varint,2,opt,name=dataType,proto3,enum=protocol.MetaDesc_DataType" json:"dataType,omitempty"`
	Attribute            map[string]string `protobuf:"bytes,3,rep,name=attribute,proto3" json:"attribute,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MetaDesc) Reset()         { *m = MetaDesc{} }
func (m *MetaDesc) String() string { return proto.CompactTextString(m) }
func (*MetaDesc) ProtoMessage()    {}
func (*MetaDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a51956628217588, []int{0}
}
func (m *MetaDesc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaDesc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaDesc.Merge(m, src)
}
func (m *MetaDesc) XXX_Size() int {
	return m.Size()
}
func (m *MetaDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaDesc.DiscardUnknown(m)
}

var xxx_messageInfo_MetaDesc proto.InternalMessageInfo

func (m *MetaDesc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetaDesc) GetDataType() MetaDesc_DataType {
	if m != nil {
		return m.DataType
	}
	return MetaDesc_TEXT
}

func (m *MetaDesc) GetAttribute() map[string]string {
	if m != nil {
		return m.Attribute
	}
	return nil
}

type Payload struct {
	Meta                 *MetaDesc `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Data                 []byte    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a51956628217588, []int{1}
}
func (m *Payload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return m.Size()
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetMeta() *MetaDesc {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Payload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type LoaderInput struct {
	ServiceId            string                `protobuf:"bytes,1,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	ServiceName          string                `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	State                LoaderInput_SessState `protobuf:"varint,3,opt,name=state,proto3,enum=protocol.LoaderInput_SessState" json:"state,omitempty"`
	Headers              map[string]string     `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Params               map[string]string     `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Expect               []*MetaDesc           `protobuf:"bytes,6,rep,name=expect,proto3" json:"expect,omitempty"`
	Pl                   []*Payload            `protobuf:"bytes,7,rep,name=pl,proto3" json:"pl,omitempty"`
	SyncId               int32                 `protobuf:"varint,8,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *LoaderInput) Reset()         { *m = LoaderInput{} }
func (m *LoaderInput) String() string { return proto.CompactTextString(m) }
func (*LoaderInput) ProtoMessage()    {}
func (*LoaderInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a51956628217588, []int{2}
}
func (m *LoaderInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoaderInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoaderInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoaderInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoaderInput.Merge(m, src)
}
func (m *LoaderInput) XXX_Size() int {
	return m.Size()
}
func (m *LoaderInput) XXX_DiscardUnknown() {
	xxx_messageInfo_LoaderInput.DiscardUnknown(m)
}

var xxx_messageInfo_LoaderInput proto.InternalMessageInfo

func (m *LoaderInput) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *LoaderInput) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *LoaderInput) GetState() LoaderInput_SessState {
	if m != nil {
		return m.State
	}
	return LoaderInput_STREAM
}

func (m *LoaderInput) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *LoaderInput) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *LoaderInput) GetExpect() []*MetaDesc {
	if m != nil {
		return m.Expect
	}
	return nil
}

func (m *LoaderInput) GetPl() []*Payload {
	if m != nil {
		return m.Pl
	}
	return nil
}

func (m *LoaderInput) GetSyncId() int32 {
	if m != nil {
		return m.SyncId
	}
	return 0
}

type LoaderOutput struct {
	ServiceId            string                  `protobuf:"bytes,1,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	Code                 int32                   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Err                  string                  `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
	Status               LoaderOutput_RespStatus `protobuf:"varint,4,opt,name=status,proto3,enum=protocol.LoaderOutput_RespStatus" json:"status,omitempty"`
	Pl                   []*Payload              `protobuf:"bytes,5,rep,name=pl,proto3" json:"pl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *LoaderOutput) Reset()         { *m = LoaderOutput{} }
func (m *LoaderOutput) String() string { return proto.CompactTextString(m) }
func (*LoaderOutput) ProtoMessage()    {}
func (*LoaderOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a51956628217588, []int{3}
}
func (m *LoaderOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoaderOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoaderOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoaderOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoaderOutput.Merge(m, src)
}
func (m *LoaderOutput) XXX_Size() int {
	return m.Size()
}
func (m *LoaderOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_LoaderOutput.DiscardUnknown(m)
}

var xxx_messageInfo_LoaderOutput proto.InternalMessageInfo

func (m *LoaderOutput) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *LoaderOutput) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *LoaderOutput) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *LoaderOutput) GetStatus() LoaderOutput_RespStatus {
	if m != nil {
		return m.Status
	}
	return LoaderOutput_BEGIN
}

func (m *LoaderOutput) GetPl() []*Payload {
	if m != nil {
		return m.Pl
	}
	return nil
}

func init() {
	proto.RegisterEnum("protocol.MetaDesc_DataType", MetaDesc_DataType_name, MetaDesc_DataType_value)
	proto.RegisterEnum("protocol.LoaderInput_SessState", LoaderInput_SessState_name, LoaderInput_SessState_value)
	proto.RegisterEnum("protocol.LoaderOutput_RespStatus", LoaderOutput_RespStatus_name, LoaderOutput_RespStatus_value)
	proto.RegisterType((*MetaDesc)(nil), "protocol.MetaDesc")
	proto.RegisterMapType((map[string]string)(nil), "protocol.MetaDesc.AttributeEntry")
	proto.RegisterType((*Payload)(nil), "protocol.Payload")
	proto.RegisterType((*LoaderInput)(nil), "protocol.LoaderInput")
	proto.RegisterMapType((map[string]string)(nil), "protocol.LoaderInput.HeadersEntry")
	proto.RegisterMapType((map[string]string)(nil), "protocol.LoaderInput.ParamsEntry")
	proto.RegisterType((*LoaderOutput)(nil), "protocol.LoaderOutput")
}

func init() { proto.RegisterFile("v2.proto", fileDescriptor_3a51956628217588) }

var fileDescriptor_3a51956628217588 = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0xf5, 0xe8, 0xcf, 0xd2, 0xb5, 0x09, 0xf3, 0x0d, 0x1f, 0x54, 0xa4, 0xc5, 0x75, 0xb4, 0x28,
	0xa6, 0x0b, 0x2d, 0x5c, 0x4a, 0x93, 0x10, 0x68, 0x9d, 0x58, 0x24, 0x82, 0x46, 0x0a, 0x63, 0xa5,
	0x74, 0x57, 0x26, 0xd2, 0x40, 0x43, 0x1d, 0x4b, 0x48, 0xe3, 0x50, 0xbf, 0x49, 0x1e, 0xa9, 0xcb,
	0x3e, 0x42, 0x49, 0x77, 0x7d, 0x89, 0x96, 0x19, 0xc9, 0xb1, 0xdb, 0x98, 0x96, 0xac, 0x74, 0x66,
	0xe6, 0x1c, 0xee, 0xb9, 0xf7, 0x5c, 0x81, 0x7d, 0x3d, 0xf4, 0x8b, 0x32, 0x17, 0x39, 0xb1, 0xd5,
	0x27, 0xcd, 0xa7, 0xde, 0x8d, 0x06, 0xf6, 0x29, 0x17, 0x6c, 0xcc, 0xab, 0x94, 0x10, 0x30, 0x66,
	0xec, 0x8a, 0xbb, 0xa8, 0x8f, 0x06, 0x0e, 0x55, 0x98, 0xbc, 0x02, 0x3b, 0x63, 0x82, 0x25, 0x8b,
	0x82, 0xbb, 0x5a, 0x1f, 0x0d, 0xb6, 0x86, 0x8f, 0xfd, 0xa5, 0xda, 0x5f, 0x2a, 0xfd, 0x71, 0x43,
	0xa1, 0x77, 0x64, 0xf2, 0x1a, 0x1c, 0x26, 0x44, 0x79, 0x79, 0x31, 0x17, 0xdc, 0xd5, 0xfb, 0xfa,
	0xa0, 0x33, 0xdc, 0xd9, 0xa0, 0x1c, 0x2d, 0x39, 0xc1, 0x4c, 0x94, 0x0b, 0xba, 0xd2, 0x6c, 0x1f,
	0xc0, 0xd6, 0xef, 0x8f, 0x04, 0x83, 0xfe, 0x89, 0x2f, 0x1a, 0x7b, 0x12, 0x92, 0xff, 0xc1, 0xbc,
	0x66, 0xd3, 0x79, 0x6d, 0xcd, 0xa1, 0xf5, 0x61, 0x5f, 0xdb, 0x45, 0xde, 0x1b, 0xb0, 0x97, 0xa6,
	0x88, 0x0d, 0x46, 0x12, 0xbc, 0x4f, 0x70, 0x8b, 0x38, 0x60, 0x8e, 0xce, 0xc7, 0x61, 0x8c, 0x91,
	0x84, 0xe1, 0xe9, 0xe8, 0x38, 0xc0, 0x9a, 0x84, 0xef, 0xc2, 0x71, 0x10, 0x63, 0x5d, 0xc2, 0x38,
	0x39, 0x09, 0x28, 0x36, 0xbc, 0x00, 0xda, 0x67, 0x6c, 0x31, 0xcd, 0x59, 0x46, 0x9e, 0x81, 0x71,
	0xc5, 0x05, 0x53, 0x95, 0x3b, 0x43, 0x72, 0xbf, 0x0d, 0xaa, 0xde, 0xe5, 0x00, 0x65, 0xff, 0xca,
	0x4d, 0x97, 0x2a, 0xec, 0xfd, 0xd4, 0xa1, 0xf3, 0x36, 0x67, 0x19, 0x2f, 0xc3, 0x59, 0x31, 0x17,
	0xe4, 0x09, 0x38, 0x15, 0x2f, 0xaf, 0x2f, 0x53, 0x1e, 0x66, 0x4d, 0x2b, 0xab, 0x0b, 0xd2, 0x87,
	0x4e, 0x73, 0x88, 0x64, 0x12, 0x75, 0x5b, 0xeb, 0x57, 0xe4, 0x25, 0x98, 0x95, 0x60, 0x6a, 0xa6,
	0x32, 0x8d, 0xa7, 0x2b, 0x33, 0x6b, 0x55, 0xfc, 0x09, 0xaf, 0xaa, 0x89, 0xa4, 0xd1, 0x9a, 0x4d,
	0x0e, 0xa0, 0xfd, 0x91, 0xcb, 0xf7, 0xca, 0x35, 0x54, 0x18, 0xde, 0x66, 0xe1, 0x49, 0x4d, 0xaa,
	0xd3, 0x58, 0x4a, 0xc8, 0x1e, 0x58, 0x05, 0x2b, 0xd9, 0x55, 0xe5, 0x9a, 0x7f, 0x26, 0xb9, 0x2e,
	0x3e, 0x53, 0x9c, 0x5a, 0xdb, 0x08, 0xc8, 0x73, 0xb0, 0xf8, 0xe7, 0x82, 0xa7, 0xc2, 0xb5, 0x94,
	0x74, 0xd3, 0xf4, 0x1a, 0x06, 0xd9, 0x01, 0xad, 0x98, 0xba, 0x6d, 0xc5, 0xfb, 0x6f, 0xc5, 0x6b,
	0x62, 0xa0, 0x5a, 0x31, 0x25, 0x8f, 0xa0, 0x5d, 0x2d, 0x66, 0xe9, 0x87, 0xcb, 0xcc, 0xb5, 0xfb,
	0x68, 0x60, 0x52, 0x4b, 0x1e, 0xc3, 0x6c, 0x7b, 0x1f, 0xba, 0xeb, 0xde, 0x1f, 0xb2, 0x2c, 0xdb,
	0x7b, 0xd0, 0x59, 0xb3, 0xfe, 0xa0, 0x3d, 0xdb, 0x01, 0xe7, 0x6e, 0xd6, 0x04, 0xc0, 0x9a, 0x24,
	0x34, 0x18, 0x9d, 0xe2, 0x96, 0x5c, 0xba, 0x38, 0x3a, 0x0a, 0x30, 0xf2, 0x7e, 0x20, 0xe8, 0xd6,
	0x53, 0x8a, 0xe7, 0xe2, 0xdf, 0x2b, 0x40, 0xc0, 0x48, 0xf3, 0xac, 0x2e, 0x65, 0x52, 0x85, 0xa5,
	0x23, 0x5e, 0x96, 0x2a, 0x72, 0x87, 0x4a, 0x28, 0x13, 0x91, 0xc1, 0xce, 0x65, 0x9c, 0x72, 0x0f,
	0xee, 0x25, 0x52, 0xd7, 0xf2, 0x29, 0xaf, 0x8a, 0x89, 0x22, 0xd2, 0x46, 0xd0, 0x4c, 0xd9, 0xfc,
	0xcb, 0x94, 0xbd, 0x5d, 0x80, 0x95, 0x50, 0xfe, 0x14, 0x87, 0xc1, 0x71, 0x18, 0xe1, 0x16, 0xe9,
	0x82, 0x7d, 0x14, 0x47, 0x49, 0x18, 0x9d, 0x07, 0x18, 0x91, 0x36, 0xe8, 0x41, 0x34, 0xc6, 0xda,
	0x5d, 0xb3, 0xfa, 0x21, 0xfe, 0x72, 0xdb, 0x43, 0x5f, 0x6f, 0x7b, 0xe8, 0xdb, 0x6d, 0x0f, 0xdd,
	0x7c, 0xef, 0xb5, 0x2e, 0x2c, 0x55, 0xe1, 0xc5, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xe4,
	0x9f, 0x35, 0x7f, 0x04, 0x00, 0x00,
}

func (m *MetaDesc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaDesc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintV2(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.DataType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintV2(dAtA, i, uint64(m.DataType))
	}
	if len(m.Attribute) > 0 {
		for k, _ := range m.Attribute {
			dAtA[i] = 0x1a
			i++
			v := m.Attribute[k]
			mapSize := 1 + len(k) + sovV2(uint64(len(k))) + 1 + len(v) + sovV2(uint64(len(v)))
			i = encodeVarintV2(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintV2(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintV2(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Payload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintV2(dAtA, i, uint64(m.Meta.Size()))
		n1, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintV2(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoaderInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoaderInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintV2(dAtA, i, uint64(len(m.ServiceId)))
		i += copy(dAtA[i:], m.ServiceId)
	}
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintV2(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintV2(dAtA, i, uint64(m.State))
	}
	if len(m.Headers) > 0 {
		for k, _ := range m.Headers {
			dAtA[i] = 0x22
			i++
			v := m.Headers[k]
			mapSize := 1 + len(k) + sovV2(uint64(len(k))) + 1 + len(v) + sovV2(uint64(len(v)))
			i = encodeVarintV2(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintV2(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintV2(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Params) > 0 {
		for k, _ := range m.Params {
			dAtA[i] = 0x2a
			i++
			v := m.Params[k]
			mapSize := 1 + len(k) + sovV2(uint64(len(k))) + 1 + len(v) + sovV2(uint64(len(v)))
			i = encodeVarintV2(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintV2(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintV2(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Expect) > 0 {
		for _, msg := range m.Expect {
			dAtA[i] = 0x32
			i++
			i = encodeVarintV2(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Pl) > 0 {
		for _, msg := range m.Pl {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintV2(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SyncId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintV2(dAtA, i, uint64(m.SyncId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoaderOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoaderOutput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintV2(dAtA, i, uint64(len(m.ServiceId)))
		i += copy(dAtA[i:], m.ServiceId)
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintV2(dAtA, i, uint64(m.Code))
	}
	if len(m.Err) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintV2(dAtA, i, uint64(len(m.Err)))
		i += copy(dAtA[i:], m.Err)
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintV2(dAtA, i, uint64(m.Status))
	}
	if len(m.Pl) > 0 {
		for _, msg := range m.Pl {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintV2(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintV2(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MetaDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovV2(uint64(l))
	}
	if m.DataType != 0 {
		n += 1 + sovV2(uint64(m.DataType))
	}
	if len(m.Attribute) > 0 {
		for k, v := range m.Attribute {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovV2(uint64(len(k))) + 1 + len(v) + sovV2(uint64(len(v)))
			n += mapEntrySize + 1 + sovV2(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Payload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovV2(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoaderInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceId)
	if l > 0 {
		n += 1 + l + sovV2(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovV2(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovV2(uint64(m.State))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovV2(uint64(len(k))) + 1 + len(v) + sovV2(uint64(len(v)))
			n += mapEntrySize + 1 + sovV2(uint64(mapEntrySize))
		}
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovV2(uint64(len(k))) + 1 + len(v) + sovV2(uint64(len(v)))
			n += mapEntrySize + 1 + sovV2(uint64(mapEntrySize))
		}
	}
	if len(m.Expect) > 0 {
		for _, e := range m.Expect {
			l = e.Size()
			n += 1 + l + sovV2(uint64(l))
		}
	}
	if len(m.Pl) > 0 {
		for _, e := range m.Pl {
			l = e.Size()
			n += 1 + l + sovV2(uint64(l))
		}
	}
	if m.SyncId != 0 {
		n += 1 + sovV2(uint64(m.SyncId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoaderOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceId)
	if l > 0 {
		n += 1 + l + sovV2(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovV2(uint64(m.Code))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovV2(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovV2(uint64(m.Status))
	}
	if len(m.Pl) > 0 {
		for _, e := range m.Pl {
			l = e.Size()
			n += 1 + l + sovV2(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovV2(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozV2(x uint64) (n int) {
	return sovV2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetaDesc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaDesc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaDesc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= MetaDesc_DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attribute == nil {
				m.Attribute = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowV2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowV2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthV2
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthV2
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowV2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthV2
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthV2
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipV2(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthV2
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attribute[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &MetaDesc{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoaderInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoaderInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoaderInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= LoaderInput_SessState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowV2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowV2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthV2
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthV2
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowV2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthV2
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthV2
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipV2(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthV2
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowV2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowV2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthV2
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthV2
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowV2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthV2
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthV2
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipV2(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthV2
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expect = append(m.Expect, &MetaDesc{})
			if err := m.Expect[len(m.Expect)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pl = append(m.Pl, &Payload{})
			if err := m.Pl[len(m.Pl)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncId", wireType)
			}
			m.SyncId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoaderOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoaderOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoaderOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LoaderOutput_RespStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pl = append(m.Pl, &Payload{})
			if err := m.Pl[len(m.Pl)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipV2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowV2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthV2
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthV2
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowV2
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipV2(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthV2
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthV2 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowV2   = fmt.Errorf("proto: integer overflow")
)
