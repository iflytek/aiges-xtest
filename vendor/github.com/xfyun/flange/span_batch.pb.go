// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: span_batch.proto

/*
	Package flange is a generated protocol buffer package.

	It is generated from these files:
		span_batch.proto

	It has these top-level messages:
		SpanBatch
*/
package flange

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// SpanBatch for batch rpc sending span
type SpanBatch struct {
	// basic fields
	TraceIds    []string `protobuf:"bytes,1,rep,name=traceIds" json:"traceIds,omitempty"`
	Names       []string `protobuf:"bytes,2,rep,name=names" json:"names,omitempty"`
	Ids         []string `protobuf:"bytes,3,rep,name=ids" json:"ids,omitempty"`
	Timestamps  []string `protobuf:"bytes,4,rep,name=timestamps" json:"timestamps,omitempty"`
	Durations   []string `protobuf:"bytes,5,rep,name=durations" json:"durations,omitempty"`
	Annotations []string `protobuf:"bytes,6,rep,name=annotations" json:"annotations,omitempty"`
	Tags        []string `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty"`
	// endpoint
	Endpoint string `protobuf:"bytes,8,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (m *SpanBatch) Reset()                    { *m = SpanBatch{} }
func (m *SpanBatch) String() string            { return proto.CompactTextString(m) }
func (*SpanBatch) ProtoMessage()               {}
func (*SpanBatch) Descriptor() ([]byte, []int) { return fileDescriptorSpanBatch, []int{0} }

func (m *SpanBatch) GetTraceIds() []string {
	if m != nil {
		return m.TraceIds
	}
	return nil
}

func (m *SpanBatch) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *SpanBatch) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *SpanBatch) GetTimestamps() []string {
	if m != nil {
		return m.Timestamps
	}
	return nil
}

func (m *SpanBatch) GetDurations() []string {
	if m != nil {
		return m.Durations
	}
	return nil
}

func (m *SpanBatch) GetAnnotations() []string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *SpanBatch) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SpanBatch) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func init() {
	proto.RegisterType((*SpanBatch)(nil), "SpanBatch")
}
func (m *SpanBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TraceIds) > 0 {
		for _, s := range m.TraceIds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Timestamps) > 0 {
		for _, s := range m.Timestamps {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Durations) > 0 {
		for _, s := range m.Durations {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Annotations) > 0 {
		for _, s := range m.Annotations {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Endpoint) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSpanBatch(dAtA, i, uint64(len(m.Endpoint)))
		i += copy(dAtA[i:], m.Endpoint)
	}
	return i, nil
}

func encodeVarintSpanBatch(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SpanBatch) Size() (n int) {
	var l int
	_ = l
	if len(m.TraceIds) > 0 {
		for _, s := range m.TraceIds {
			l = len(s)
			n += 1 + l + sovSpanBatch(uint64(l))
		}
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovSpanBatch(uint64(l))
		}
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovSpanBatch(uint64(l))
		}
	}
	if len(m.Timestamps) > 0 {
		for _, s := range m.Timestamps {
			l = len(s)
			n += 1 + l + sovSpanBatch(uint64(l))
		}
	}
	if len(m.Durations) > 0 {
		for _, s := range m.Durations {
			l = len(s)
			n += 1 + l + sovSpanBatch(uint64(l))
		}
	}
	if len(m.Annotations) > 0 {
		for _, s := range m.Annotations {
			l = len(s)
			n += 1 + l + sovSpanBatch(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovSpanBatch(uint64(l))
		}
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovSpanBatch(uint64(l))
	}
	return n
}

func sovSpanBatch(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSpanBatch(x uint64) (n int) {
	return sovSpanBatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SpanBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpanBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpanBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceIds = append(m.TraceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpanBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpanBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpanBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamps = append(m.Timestamps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Durations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpanBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Durations = append(m.Durations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpanBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Annotations = append(m.Annotations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpanBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpanBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpanBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpanBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpanBatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpanBatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpanBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpanBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSpanBatch
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpanBatch
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpanBatch(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpanBatch = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpanBatch   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("span_batch.proto", fileDescriptorSpanBatch) }

var fileDescriptorSpanBatch = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x31, 0x69, 0x4b, 0x73, 0x2c, 0x95, 0xc5, 0x60, 0x21, 0x64, 0x45, 0x4c, 0x4c, 0xe9,
	0xc0, 0xc2, 0xdc, 0x8d, 0x15, 0x36, 0x16, 0x74, 0x6d, 0x8c, 0xb1, 0x20, 0x67, 0x2b, 0x77, 0x7d,
	0x17, 0x1e, 0x89, 0x91, 0x37, 0x00, 0x85, 0x17, 0x41, 0x36, 0x85, 0x76, 0xbb, 0xef, 0xfb, 0x96,
	0x5f, 0x07, 0x0b, 0x4e, 0x48, 0x8f, 0x6b, 0x94, 0xcd, 0x73, 0x9b, 0x86, 0x28, 0xf1, 0xf2, 0x53,
	0x41, 0x7d, 0x9f, 0x90, 0x56, 0xd9, 0xe9, 0x73, 0x98, 0xcb, 0x80, 0x1b, 0x77, 0xdb, 0xb1, 0x51,
	0x4d, 0x75, 0x55, 0xdf, 0xfd, 0xb3, 0x3e, 0x83, 0x29, 0x61, 0xef, 0xd8, 0x1c, 0x97, 0xf0, 0x0b,
	0x7a, 0x01, 0x55, 0xe8, 0xd8, 0x54, 0xc5, 0xe5, 0x53, 0x5b, 0x00, 0x09, 0xbd, 0x63, 0xc1, 0x3e,
	0xb1, 0x99, 0x94, 0x70, 0x60, 0xf4, 0x05, 0xd4, 0xdd, 0x76, 0x40, 0x09, 0x91, 0xd8, 0x4c, 0x4b,
	0xde, 0x0b, 0xdd, 0xc0, 0x29, 0x12, 0x45, 0xd9, 0xf5, 0x59, 0xe9, 0x87, 0x4a, 0x6b, 0x98, 0x08,
	0x7a, 0x36, 0x27, 0x25, 0x95, 0x3b, 0xef, 0x76, 0xd4, 0xa5, 0x18, 0x48, 0xcc, 0xbc, 0x51, 0x79,
	0xf7, 0x1f, 0xaf, 0x6e, 0xde, 0x47, 0xab, 0x3e, 0x46, 0xab, 0xbe, 0x46, 0xab, 0xde, 0xbe, 0xed,
	0x11, 0xe8, 0x38, 0xf8, 0xd6, 0x3b, 0x0a, 0xb2, 0xe5, 0xd6, 0x23, 0xbf, 0x38, 0x79, 0xc8, 0x6e,
	0xb9, 0x73, 0xcb, 0xa7, 0x57, 0x24, 0xef, 0xd6, 0xb3, 0xf2, 0xa2, 0xeb, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xad, 0xe5, 0xaf, 0x01, 0x36, 0x01, 0x00, 0x00,
}
